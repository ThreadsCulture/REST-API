swagger: '2.0'
info:
  version: 1.0.0
  title: Threads REST API
  contact:
    email: engineering@threadsculture.com
  description: |
    # Introduction
    This API is currently in beta. 
    Please e-mail engineering@threadsculture.com to receive a client ID and secret to access the API. You must have an active Threads account with a admin user credentials to use this API.
    
    For bug reports and feature requests, please use our github repo issue tracker at: https://github.com/ThreadsCulture/REST-API/issues
    
    # OAuth Authentication
    API Authentication is done via an OAuth token. To retrieve an oauth token, send an HTTP `POST` request to `https://YOUR-COMPANY-PORTAL.ourthreads.com/oauth/token`
    
    This request should have the following query parameters:
    * `client_id` - Client ID
    * `client_secret` - Client secret
    * `grant_type` - Should always be "password"
    * `email` - The e-mail address of the user account the API will function on behalf of
    * `password` - The password of the user account the API will function on behalf of
    
    [Fully constructed sample URL](https://YOUR-COMPANY-PORTAL.ourthreads.com/oauth/token?client_id=de65bb7b6f420d9caf5305ca342f71c95f516bb7459aaa4e7bab969bdce59cf5&client_secret=fd63d92e98fadba9914e3f89212cf5d1d574c0f9f861bd9c9a2ef796fd281757&grant_type=password&email=example%40threadsculture.com&password=abcd1234)
    
    If successfully authenticated, you will receive the following JSON response body:
    
    ```
    {
    	"access_token": "f49648148cc056fd2a585b102ab9e7ab327cb0c89c204af4b42cf5d57b881e72",
    	"token_type": "bearer",
    	"expires_in": 7200,
    	"created_at": 1475085093
    }
    ```
    
    Once a token is retrieved, it should be placed in the HTTP `Bearer` header of every HTTP request:
    
    `Bearer 7dd917ca6702e8cdf6e66892afad723ec85b8e3fe6104bcb2d53bf64f4a76680`
    
    Tokens expire after 2 hours.
    
  x-logo:
    url: http://www.threadsculture.com/content/uploads/2016/09/threads_logo_small.png
basePath: /api/v1
host: YOUR-COMPANY-PORTAL.ourthreads.com
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  oauth:
    type: oauth2
    flow: password
    tokenUrl: "/oauth/token"
    scopes: {
      "basic": "Modify your company and users"
    }
tags:
  - name: users
    description: Manage creation and removal of users
  - name: positions
    description: Manage job positions and assignments
  - name: reviews
    description: Manage reviews for employees
paths:
  /users:
    get:
      summary: List all users for your company
      tags:
        - users
      security:
        - oauth:
          - basic
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/UserResponse'
    post:
      summary: Create new user for your company
      tags:
        - users
      description: |
        If `position` and `department` are supplied, this will create a new job position (and new department if necessary)
        and assign the created user to the job.

        If `supervisor_email` is supplied and is a valid manager e-mail for your comapny, the job assigned to this user
        will report to this supervisor. Must also supply the `position` and `department` parameters to succeed.
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: User object
          required: false
          schema:
            $ref: "#/definitions/UserCreateRequest"
      responses:
        '201':
          description: User created
        '400':
          description: Invalid user supplied
        '422':
          description: Required parameter missing
  '/users/{user_id}':
    get:
      summary: Get a specific user by user ID
      tags:
        - users
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: user_id
          description: The user ID associated with the user to display
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UserResponse'
        '404':
          description: User not found
    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - users
      description: Update user information
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: user_id
          description: The user ID to update
          required: true
          type: string
        - in: body
          name: body
          description: User information to update
          required: false
          schema:
            $ref: "#/definitions/UserUpdateRequest"
      responses:
        '200':
          description: User updated
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: Invalid user supplied
        '422':
          description: Required parameter missing
  '/users/{user_id}/position':
    post:
      summary: Assign new position to user
      tags:
        - positions
      description: |
        Create new position for user and assign them to it. Fails if the user is already assigned to a position.
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: user_id
          description: The user ID to update
          required: true
          type: string
        - in: body
          name: body
          description: Position to create
          required: false
          schema:
            $ref: "#/definitions/PositionRequest"
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: Invalid user supplied
        '422':
          description: Required parameter missing
    delete:
      summary: Unassign user from position
      operationId: unassignPosition
      tags:
        - positions
      description: Remove user from their org. chart position
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: user_id
          description: The user ID to update
          required: true
          type: string
        - name: termination_date
          description: |
            Optional. ISO8601 formatted date of users termination. Only provide if user is no longer with your company.
          in: query
          type: string
      responses:
        '200':
          description: Successfully unassigned position
          schema:
            $ref: '#/definitions/UserResponse'
  /reviews:
    post:
      summary: Create reviews for users
      tags:
        - reviews
      description: Create reviews for the specified users
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: Reviews to create
          required: false
          schema:
            $ref: "#/definitions/ReviewCreateRequest"        
      responses:
        '200':
          description: Successfully created review
          schema:
            $ref: '#/definitions/ReviewCreateResponse'
          
        
definitions:
  UserCreateRequest:
    type: object
    required: ["first_name","last_name","email","role","password"]
    properties:
      first_name:
        type: string
        description: First name of user
      last_name:
        type: string
        description: Last name of user
      email:
        type: string
        description: E-mail address of user
      role:
        $ref: '#/definitions/Role'
      password:
        type: string
        description: Password to use as the user's password for logging in
      position:
        type: string
        description: Job title of position
      department:
        type: string
        description: Department the position is under
      supervisor_email:
        type: string
        description: |
          E-mail of the manager this person reports to. This manager must already be in the system and be at least a manager or admin role. If this property is supplied, position and department must also be supplied. The position created will automatically be assigned to this supervisor as an employee.
      phone_number:
        type: string
        description: Phone number 
      phone_number_ext:
        type: string
        description: Phone number extension
      hire_date:
        type: string
        description: ISO8601 formatted date string
  UserUpdateRequest:
    type: object
    properties:
      first_name:
        type: string
        description: First name of user
      last_name:
        type: string
        description: Last name of user
      email:
        type: string
        description: E-mail address of user
      role:
        $ref: '#/definitions/Role'
      phone_number:
        type: string
        description: Phone number 
      phone_number_ext:
        type: string
        description: Phone number extension
      hire_date:
        type: string
        description: ISO8601 formatted date string  
  ReviewCreateResponse:        
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      date:
        type: string
  UserResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      role:
        $ref: '#/definitions/Role'
      position:
        type: string
      department:
        type: string
  ReviewCreateRequest:
    type: object
    properties:
      user_ids:
        description: Array of user ID's to create the review on behalf of
        type: array
        items: {
          type: integer
        }
      date:
        description: | 
          ISO8601 formatted date string  that the review should take place
        type: string
      name:
        description: Name of the review
        type: string
  PositionRequest:
    type: object
    required: ["position","department"]
    properties:
      position:
        type: string
        description: The job title for this position
      department:
        type: string
        description: The department that this job is a part of. If this matches an existing department
      supervisor_email:
        type: string
        description: |
          E-mail of the manager this person reports to. This manager must already be in the system and be at least a manager or admin role. The position created will automatically be assigned to this supervisor as an employee.
  Role:
    type: string
    default: employee
    enum:
     - hr
     - manager
     - employee
