swagger: '2.0'
info:
  version: 1.0.0
  title: Threads REST API
  contact:
    email: engineering@threadsculture.com
  description: |
    # Introduction
    This API is currently in beta. 
    Please e-mail engineering@threadsculture.com to receive a client ID and secret to access the API. You must have an active Threads account with a admin user credentials to use this API.
    
    For bug reports and feature requests, please use our github repo issue tracker at: https://github.com/ThreadsCulture/REST-API/issues
    
    # OAuth Authentication
    API Authentication is done via an OAuth token. To retrieve an oauth token, send an HTTP `POST` request to `https://YOUR-COMPANY-PORTAL.ourthreads.com/oauth/token`
    
    This request should have the following query parameters:
    * `client_id` - Client ID
    * `client_secret` - Client secret
    * `grant_type` - Should always be "password"
    * `email` - The e-mail address of the user account the API will function on behalf of
    * `password` - The password of the user account the API will function on behalf of
    
    Note that these parameters should be sent in the query string of the request, not as POST data. cURL example:
    
    ```
    curl 'https://YOUR-COMPANY-PORTAL.ourthreads.com/oauth/token?client_id=de65bb7b6f420d9caf5305ca342f71c95f516bb7459aaa4e7bab969bdce59cf5&client_secret=fd63d92e98fadba9914e3f89212cf5d1d574c0f9f861bd9c9a2ef796fd281757&grant_type=password&email=example%40threadsculture.com&password=abcd1234' -X POST
    ```
    
    [Fully constructed sample URL](https://YOUR-COMPANY-PORTAL.ourthreads.com/oauth/token?client_id=de65bb7b6f420d9caf5305ca342f71c95f516bb7459aaa4e7bab969bdce59cf5&client_secret=fd63d92e98fadba9914e3f89212cf5d1d574c0f9f861bd9c9a2ef796fd281757&grant_type=password&email=example%40threadsculture.com&password=abcd1234)
    
    If successfully authenticated, you will receive the following JSON response body:
    
    ```
    {
    	"access_token": "f49648148cc056fd2a585b102ab9e7ab327cb0c89c204af4b42cf5d57b881e72",
    	"token_type": "bearer",
    	"expires_in": 7200,
    	"created_at": 1475085093
    }
    ```
    
    Once a token is retrieved, it should be placed in the HTTP `Authorization` header prefixed by the word 'Bearer' of every HTTP request:
    
    `Authorization: Bearer 7dd917ca6702e8cdf6e66892afad723ec85b8e3fe6104bcb2d53bf64f4a76680`
    
    Example cURL request:
    
    ```
    curl 'https://YOUR-COMPANY-PORTAL.ourthreads.com/api/v1/org_chart' -H 'authorization: Bearer 7dd917ca6702e8cdf6e66892afad723ec85b8e3fe6104bcb2d53bf64f4a76680' 
    ```
    
    Tokens expire after 2 hours. 
    
  x-logo:
    url: http://www.threadsculture.com/content/uploads/2016/09/threads_logo_small.png
basePath: /api/v1
host: YOUR-COMPANY-PORTAL.ourthreads.com
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  oauth:
    type: oauth2
    flow: password
    tokenUrl: "/oauth/token"
    scopes: {
      "basic": "Modify your company and employees"
    }
tags:
  - name: users
    description: Manage creation and removal of employees
  - name: reviews
    description: Manage reviews for employees
  - name: departments
    description: Manage the departments within your company
  - name: job descriptions
    description: Manage the jobs available for your company
  - name: org chart
    description: Manage positions on your company's org. chart
  - name: comments
    description: Manage feedback left for employees
  - name: feedback requests
    description: Manage feedback requests for and about employees
  - name: documents
    description: Manage personnel and company documents
  - name: custom attributes
    description: Manage custom attributes 
  - name: list filters
    description: Manage list view filters
  - name: data exports
    description: Create and download exports 
    
paths:
  /users:
    get:
      summary: List company employees
      tags:
        - users
      security:
        - oauth:
          - basic
      parameters:
        - name: by_status
          in: query
          description: | 
            Filter by status of employee
            * `Current Employee` - Employees that have an assigned position
            * `Inactive Employee` - Employees that do not have an assigned position
            * `Former Employee` - Employees that are terminated
          type: string
          enum: ['Current Employee','Inactive Employee','Former Employee']
          default: Current Employee
        - name: by_role
          in: query
          description: | 
            Filter by user role. hr (admin), manager, or employee 
          type: string
          enum: ['hr','manager','employee']
        - name: search_query
          in: query
          description: Filter by keyword search against the users names
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/CollectionResponse'
    post:
      summary: Create new user for your company
      tags:
        - users
      description: |
        If `position` and `department` are supplied, this will create a new job position (and new department if necessary)
        and assign the created user to the job.

        If `supervisor_email` is supplied and is a valid manager e-mail for your comapny, the job assigned to this user
        will report to this supervisor. Must also supply the `position` and `department` parameters to succeed.
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: User object
          required: false
          schema:
            $ref: "#/definitions/UserCreateRequest"
      responses:
        '201':
          description: User created
        '400':
          description: Invalid user supplied
        '422':
          description: Required parameter missing
  '/users/{user_id}':
    get:
      summary: Get a specific user by ID
      description: Use 'me' as the user_id to show information about the currently authenticated user. 
      tags:
        - users
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: user_id
          description: The user ID associated with the user to display
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UserShowResponse'
        '404':
          description: User not found
    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - users
      description: Update user information
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: user_id
          description: The user ID to update
          required: true
          type: string
        - in: body
          name: body
          description: User information to update
          required: false
          schema:
            $ref: "#/definitions/UserUpdateRequest"
      responses:
        '200':
          description: User updated
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: Invalid user supplied
        '422':
          description: Required parameter missing
  '/users/{user_id}/position':
    post:
      summary: Assign new position to user
      tags:
        - users
      description: |
        Create new position for user and assign them to it. Fails if the user is already assigned to a position.
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: user_id
          description: The user ID to update
          required: true
          type: string
        - in: body
          name: body
          description: Position to create
          required: false
          schema:
            $ref: "#/definitions/PositionRequest"
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: Invalid user supplied
        '422':
          description: Required parameter missing
    delete:
      summary: Unassign user from position
      operationId: unassignPosition
      tags:
        - users
      description: Remove user from their org. chart position. The position will be left as a vacant position on the org. chart.
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: user_id
          description: The user ID to update
          required: true
          type: string
        - name: terminate
          in: query
          type: boolean
          description: Mark this employee as terminated
        - name: termination_date
          description: |
            Optional. ISO8601 formatted date of users termination. Only provide if user is no longer with your company. Terminate must be set to true for this to take effect.
          in: query
          type: string
      responses:
        '200':
          description: Successfully unassigned position
          schema:
            $ref: '#/definitions/UserResponse'
  /users/welcome:
    post:
      summary: Send welcome emails
      tags:
        - users
      description: |
        Send a welcome email to users containing a link to login to Threads.
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: User IDs to send the welcome e-mail to
          required: true
          schema:
            $ref: "#/definitions/SendWelcomeRequest"        
      responses:
        '200':
          description: Successfully created review
          schema:
            $ref: '#/definitions/SendWelcomeResponse'
  '/exports/{export_id}':
    get:
      summary: 'Get details for a data export' 
      tags:
        - data exports
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: export_id
          description: The export ID to load
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/DataExportResponse'
        '404':
          description: Export not found
  '/filters':
    get:
      summary: 'Get list filter by model key'
      description: Unlike other routes, in order to load a list filter you must provide a `model` key. This will load the most recent list filter for a given key made by the user authenticated for the request.
      tags:
        - list filters
      security:
        - oauth:
          - basic
      parameters:
        - in: query
          name: model
          description: The model key to load the most recent list filter for the authenticated user
          required: true
          type: string   
      responses:
        '200':
          description: 'List filter object'
          schema:
            $ref: '#/definitions/ListFilterResponse'       
  '/filters/selections':
    get:
      summary: 'Get list selections by model key'
      description: This route gets the selected rows for the most recent list filter loaded by model key
      tags: 
        - list filters
      security:
        - oauth:
          - basic
      parameters:
        - in: query
          name: model
          description: The model key to load the most recent list filter for the authenticated user
          required: true
          type: string  
      responses:
        '200':
          description: List of selected rows
          schema:
            $ref: '#/definitions/CollectionResponse'          
  /exports:
    post:
      summary: 'Create a new data export'
      tags:
        - data exports
      description: Create a new data export to process and run against a list filter
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: Data export to create
          required: true
          schema:
            $ref: "#/definitions/DataExportRequest"
      responses:
        '200':
          description: Successfully created custom attribute
          schema:
            $ref: '#/definitions/DataExportResponse'
  '/exports/{export_id}/download':
    get:
      summary: 'Download a completed export'
      tags:
        - data exports
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: export_id
          description: The export ID to download
          required: true
          type: string
      responses:
        '302':
          description: Redirection to the temporarily generated URL to export download
        '404':
          description: Export not found            
  '/custom_attributes/{attribute_type}/{attribute_id}':
    post:
      summary: 'Set custom attribute for object'
      tags:
       - custom attributes
      description: |
        Set a custom attribute associated with a user (or object). Valid object types are 'User' or 'Company'. The authenticated API user must have the ability to manage any object passed to this route in order to set a custom attribute to it. 
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: attribute_type
          description: The type of object to associate the custom attribute to
          required: true
          type: string
        - in: path
          name: attribute_id
          description: The ID of object to associate the custom attribute to
          required: true
          type: string
        - in: body
          name: body
          description: Reviews to create
          required: true
          schema:
            $ref: "#/definitions/CustomAttributeRequest"
      responses:
        '200':
          description: Successfully created custom attribute
          schema:
            $ref: '#/definitions/CustomAttributeResponse'
    get:
      summary: 'List custom attributes for object'
      tags:
        - custom attributes
      description: |
        List custom attributes associated with object
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: attribute_type
          description: The type of object to associate the custom attribute to
          required: true
          type: string
        - in: path
          name: attribute_id
          description: The ID of object to associate the custom attribute to
          required: true
          type: string
        - in: query
          name: key
          description: Key to filter custom attributes by
          type: string
        - in: query
          name: search_query
          description: Search for custom attribute by key
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/CollectionResponse'
  /custom_attributes:
    post:
      summary: 'Set custom attribute for user'
      tags:
       - custom attributes
      description: |
        Set a custom attribute for the currently authenticated user
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: Reviews to create
          required: true
          schema:
            $ref: "#/definitions/CustomAttributeRequest"
      responses:
        '200':
          description: Successfully created custom attribute
          schema:
            $ref: '#/definitions/CustomAttributeResponse'
    get:
      summary: 'List custom attributes for user'
      tags:
        - custom attributes
      description: |
        List custom attributes associated with the currently authenticated user
      security:
        - oauth:
          - basic
      parameters:
        - in: query
          name: key
          description: Key to filter custom attributes by
          type: string
        - in: query
          name: search_query
          description: Search for custom attribute by key
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/CollectionResponse'
  /reviews:
    get:
      summary: List reviews
      tags:
        - reviews
      security:
        - oauth:
          - basic
      parameters:
        - name: search_query
          in: query
          description: Filter reviews by keyword search 
          type: string
        - name: results_only
          in: query
          description: Only return result data and no other list information
          type: boolean
        - name: 'columns[]'
          in: query
          description: Used in conjunction with "results_only", this will only return the specific columns requested
          type: array
          collectionFormat: multi
          items:
            type: string
        - name: per_page
          in: query
          description: Number of results to return per page
          type: integer
        - name: page
          in: query
          description: Page of results to return
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/CollectionResponse'
    post:
      summary: Create reviews for employees
      tags:
        - reviews
      description: Create reviews for the specified employee
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: Reviews to create
          required: true
          schema:
            $ref: "#/definitions/ReviewCreateRequest"        
      responses:
        '200':
          description: Successfully created review
          schema:
            $ref: '#/definitions/ReviewCreateResponse'
    put:
      summary: Update reviews
      tags:
        - reviews
      description: Update selected reviews
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: Reviews to update
          required: true
          schema: 
            $ref: "#/definitions/ReviewUpdateRequest"
      responses:
        '200':
          description: Successfully updated reviews
          schema:
            $ref: '#/definitions/ReviewUpdateResponse'
  /documents:
    get:
      summary: List documents
      tags:
        - documents
      security:
        - oauth:
          - basic
      parameters:
        - name: search_query
          in: query
          description: Filter documents by keyword search against document title and file name
          type: string
        - name: type
          in: query
          type: string
          enum: ['company','personnel']
          description: Filter only company documents or personnel documents
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/CollectionResponse'
    post:
      summary: Upload a new document
      tags:
        - documents
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: Document to create
          required: true
          schema:
            $ref: "#/definitions/DocumentCreateRequest"        
      responses:
        '200':
          description: Successfully uploaded document
          schema:
            $ref: '#/definitions/DocumentShowResponse'
  '/documents/{document_id}':
    delete:
      summary: Delete a document
      tags:
        - documents
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: document_id
          description: The document ID to retrieve
          required: true
          type: string
      responses:
        '201':
          description: Document deleted
  '/documents/{document_id}/download':
    get:
      summary: Download a document
      tags:
        - documents
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: document_id
          description: The document ID to retrieve
          required: true
          type: string
      responses:
        '302':
          description: Redirected to download
  /departments:
    get:
      summary: List departments in your company
      tags:
        - departments
      security:
        - oauth:
          - basic
      parameters:
        - name: search_query
          in: query
          description: Filter by keyword search against the department name and description
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/CollectionResponse'
  '/departments/{department_id}':
    get:
      summary: Get department by ID
      tags:
        - departments
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: department_id
          description: The department ID to retrieve
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/DepartmentResponse'
        '404':
          description: User not found
  /job_descriptions:
    get:
      summary: List job descriptions for your company
      tags:
        - job descriptions
      security:
        - oauth:
          - basic
      parameters:
        - name: search_query
          in: query
          description: Filter by keyword search against the job name and description
          type: string
        - name: by_status
          in: query
          description: | 
            Filter by active or former job descriptions
          type: string
          default: active
          enum: ['active','former']
        - name: by_department
          in: query
          description: | 
            Filter by department ID
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/CollectionResponse'
  /org_chart:
    get:
      summary: Get your company's org. chart
      description: Get your company's org. chart as a tree of nested position objects
      tags:
        - org chart
      security:
        - oauth:
          - basic
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/OrgChartTreeResponse'
  '/org_chart/{position_instance_id}':
    get:
      summary: Get org. chart position
      description: Get information about specific position on the org. chart
      tags:
        - org chart
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: position_instance_id
          description: The ID of the position on the org. chart to retrieve
          required: true
          type: string
        - name: show_reports
          in: query
          description: Show the positions of anyone who reports to this user. 'all' will send display all reports recursively, 'direct' will only show the immediate descending reports.
          type: string
          enum: ['all','direct']
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PositionInstanceResponse'
  '/feedback_requests':
    post:
      summary: Create a feedback request
      description: Create a feedback request for a respondent employee
      tags:
        - feedback requests
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: Feedback request data
          required: true
          schema:
            $ref: "#/definitions/FeedbackRequestCreateRequest"
      responses:
        '200':
          description: Feedback request created
          schema:
            $ref: '#/definitions/FeedbackRequestResponse'
  '/comments':
    post:
      summary: Create comment
      description: Create a comment for one or more recipients
      tags:
        - comments
      security:
        - oauth:
          - basic
      parameters:
        - in: body
          name: body
          description: Comment data to update
          required: false
          schema:
            $ref: "#/definitions/CommentCreateRequest"
      responses:
        '200':
          description: Comment updated
          schema:
            $ref: '#/definitions/BatchResult'
        '400':
          description: Invalid comment supplied
        '422':
          description: Required parameter missing
  '/comments/{comment_id}':
    put:
      summary: Update a comment
      description: Update a comment
      tags:
        - comments
      security:
        - oauth:
          - basic
      parameters:
        - in: path
          name: comment_id
          description: The comment ID to update
          required: true
          type: string
        - in: body
          name: body
          description: Comment data to update
          required: false
          schema:
            $ref: "#/definitions/CommentUpdateRequest"
      responses:
        '200':
          description: Comment updated
          schema:
            $ref: '#/definitions/BatchResult'
        '400':
          description: Invalid comment supplied
        '422':
          description: Required parameter missing
definitions:
  UserCreateRequest:
    type: object
    required: ["first_name","last_name","email","role","password"]
    properties:
      first_name:
        type: string
        description: First name of user
      last_name:
        type: string
        description: Last name of user
      email:
        type: string
        description: E-mail address of user
      role:
        $ref: '#/definitions/Role'
      password:
        type: string
        description: Password to use as the user's password for logging in
      position:
        type: string
        description: Job title of position
      department:
        type: string
        description: Department the position is under
      supervisor_email:
        type: string
        description: |
          E-mail of the manager this person reports to. This manager must already be in the system and be at least a manager or admin role. If this property is supplied, position and department must also be supplied. The position created will automatically be assigned to this supervisor as an employee.
      phone_number:
        type: string
        description: Phone number 
      phone_number_ext:
        type: string
        description: Phone number extension
      hire_date:
        type: string
        description: ISO8601 formatted date string
  UserUpdateRequest:
    type: object
    properties:
      first_name:
        type: string
        description: First name of user
      last_name:
        type: string
        description: Last name of user
      email:
        type: string
        description: E-mail address of user
      role:
        $ref: '#/definitions/Role'
      phone_number:
        type: string
        description: Phone number 
      phone_number_ext:
        type: string
        description: Phone number extension
      hire_date:
        type: string
        description: ISO8601 formatted date string  
  CommentUpdateRequest:
    type: object
    properties:
      content:
        type: string
        description: Content of the feedback
      deleted:
        type: boolean
        description: Indicate whether the comment is deleted or not
      feedback_request_id:
        type: integer
        description: Attach this comment to a specific feedback request
      visible_to_recipient:
        type: boolean
        description: Indicate whether this comment is visible to the recipient or not
      attachment:
        $ref: '#/definitions/FileUpload'
      delete_attachment:
        type: boolean
        description: Delete the existing attachment from the comment. If a new attachment is being uploaded to overwrite the existing one, this field should be set to true or the new attachment will not be used.
  FeedbackRequestCreateRequest:
    type: object
    properties:
      respondent_id: 
        type: integer
        description: The user ID for the feedback request respondent
      instructions:
        type: string
        description: The instructions for this feedback request
      respondent_selected_audience:
        type: boolean
        description: Indicates whether the respondent will choose the recipients for this feedback request
      recipient_ids:
        description: Array of user ID's to the feedback request is for.
        type: array
        items: {
          type: integer
        }
  CommentCreateRequest:
    type: object
    properties:
      content:
        type: string
        description: Content of the feedback
      feedback_request_id:
        type: integer
        description: Attach this comment to a specific feedback request
      recipient_ids:
        description: Array of user ID's to create the comment on behalf of. Add the string value \'self\' to this array to create a comment for the user that is authenticated via the API. 
        type: array
        items: {
          type: integer
        }
      visible_to_recipient:
        type: boolean
        description: Whether or not this comment will be visible to the recipient
      attachment:
        $ref: '#/definitions/FileUpload'
  SendWelcomeResponse:        
    type: object
    properties:
      results:
        $ref: '#/definitions/BatchResult'
      errors:
        type: array
        items: {
          type: string
        }        
  ReviewCreateResponse:        
    type: object
    properties:
      results:
        $ref: '#/definitions/BatchResult'
      errors:
        type: array
        items: {
          type: string
        }
  ReviewUpdateResponse:        
    type: object
    properties:
      results:
        $ref: '#/definitions/BatchResult'
      errors:
        type: array
        items: {
          type: string
        }        
  CollectionResponse:
    type: object
    properties:
      link:
        type: object
        description: Pagination links, if any are available
      per_page:
        type: integer
        description: The number of items to load at once. 
        default: 25
      page: 
        type: integer
        default: 1
        description: The page that is currently being displayed
      results:
        type: array
        items: {
          type: object,
          description: Row properties of results
        }
      total:
        type: integer
        description: Total number of results 
  FeedbackRequestResponse:
    type: object
    properties:
      id: 
        type: integer
        format: int64
      instructions:
        type: string
      responses:
        type: array
        description: Array of request responses and their recipients
        items: {
          $ref: '#/definitions/FeedbackRequestResponses'
        }
  FeedbackRequestResponses:
    type: object
    properties:
      id:
        type: integer
        format: int64
      recipient:
        $ref: '#/definitions/UserResponse'
      feedback:
        type: string
        description: The content of the feedback response comment
  UserResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      role:
        $ref: '#/definitions/Role'
      position:
        type: string
      department:
        type: string
      supervisor: 
        type: string
      supervisor_id:
        type: integer
      allow_recipient_visible_feedback:
        type: string
        description: | 
          Determines whether or not feedback can (or will be) made visible to this person. "Always" means feedback will always be visible to this recipient, "optional" means feedback can optionally be made visible to this recipient, and "never" means feedback can never be made visible to this recipient. 
        enum: 
         - always
         - optional
         - never
  DepartmentResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      users_count:
        type: integer
        description: Number of employees in this department
      vacant_positions:
        type: integer
        description: Number of vacant job positions in this department
      filled_positions:
        type: integer
        description: Number of occupied job positions in this department
  ListFilterResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      key:
        type: string
        description: 'String identifier (usually related to the type of list being loaded)
      owner:
        $ref: '#/definitions/UserResponse'
      updated_at:
        type: string
        description: ISO8601 formatted date string of when the list filter was created
      created_at:
        type: string
        description: ISO8601 formatted date string of when the list filter was last updated
      filters:
        type: object
        additionalProperties: true
  DataExportResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      list_filter_id:
        type: integer
        format: int64
      updated_at:
        type: string
        description: ISO8601 formatted date string of when the export was created
      created_at:
        type: string
        description: ISO8601 formatted date string of when the export was last updated
      expires_at:
        type: string
        description: ISO8601 formatted date string of when the export will expire and no longer be available
      download_url:
        type: string
        description: The URL to download the export (only present if the export is available)
      status:
        type: string
        enum: ['Queued','Started','Completed','Failed','Expired']
      export_format:
        type: string
        enum: ['csv','pdf','details.pdf']
      export_file_name:
        type: string
      created_by:
        $ref: '#/definitions/UserResponse'
      
  CustomAttributeResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      attributable_type:
        type: string
        description: The type of object this custom attribute is associated with
      attributable_id:
        type: integer
        format: int64
        description: Type ID of the object this custom attribute is associated with
      key:
        type: string
        description: The reference key for this custom attribute
      value:
        type: string
        description: The value of the custom attribute
  PositionInstanceResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      job_title:
        type: string
      department:
        type: string
      name:
        type: string
        description: Name of employee. This property will not exist if this job is vacant.
      user_id:
        type: integer
        format: int64
        description: User ID of employee. Will be null if this job is vacant. 
      supervisor:
        type: string
      supervisor_id:
        type: string
      reports:
        description: Array of employees reporting to this person
        type: array
        items: {
          $ref: '#/definitions/OrgChartTreeResponse'
        }
  OrgChartTreeResponse:
    type: object
    properties:
      id: 
        type: integer
        format: int64
      name:
        type: string
        description: Name of employee
      department:
        type: string
      user_id:
        type: integer
        format: int64
      job_title:
        type: string
      reports:
        description: Array of employees reporting to this person
        type: array
        items: {
          $ref: '#/definitions/OrgChartTreeResponse'
        }
  DocumentShowResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        description: Name of document
      person:
        type: object
        items: {
          $ref: '#/definitions/UserResponse'
        }
      document:
        type: string
        description: Secure URL to directly download the document
      effective_on:
        type: string
        description: ISO8601 formatted string for effective date
      expires_on:
        type: string
        description: ISO8601 formatted string for expiration date
  UserShowResponse:
    allOf:
      - $ref: '#/definitions/UserResponse'
      - properties:
          next_review_name_suggestion:
            type: string
          next_review_date_suggestion:
            type: string
            format: date
          feedback_received:
            type: integer
          feedback_self:
            type: integer
          feedback_given:
            type: integer
          nav:
            type: object
            description: Navigation items as an object tree (only appears if you are the user being requested)
  SendWelcomeRequest:
    type: object
    required: ["user_ids"]
    properties:
      user_ids:
        description: Array of user ID's to create the review on behalf of
        type: array
        items: {
          type: integer
        }        
  ReviewCreateRequest:
    type: object
    required: ["user_ids"]
    properties:
      user_ids:
        description: Array of user ID's to create the review on behalf of
        type: array
        items: {
          type: integer
        }
      date:
        description: | 
          ISO8601 formatted date string that the review should take place. If the date is not provided, the system will automatically generate one based on company review cycle settings.
        type: string
      name:
        description: |
          Name of the review. If the name is not provided, the system will automatically generate one based on the company review cycle settings and the review date that is set. Example: 2014 Q3 Review
        type: string
  DataExportRequest:
    type: object
    required: ["list_filter_id","export_format"]
    properties:
      list_filter_id:
        description: The list filter ID to perform the export on
        type: integer
      export_format:
        description: The format of the export
        type: string
        enum: ["csv","pdf","details.pdf"]
      columns:
        description: Array of columns to export (export_format must be "csv")
        type: array
        items: {
          type: string
        }
  DocumentCreateRequest:
    type: object
    required: ["name","document"]
    properties:
      name:
        description: The name of the document
        type: string
      document:
        $ref: '#/definitions/FileUpload'
      effective_on: 
        description: ISO8601 formatted date of when the document is effective on
        type: string
      expires_on:
        description: ISO8601 formatted date of when the document is no longer in effect
        type: string
  CustomAttributeRequest:
    type: object
    required: ["key", "value"]
    properties:
      key:
        description: Key to reference the custom attribute by
        type: string
      value:
        description: Value of the custom attribute
        type: string
  FileUpload:
    type: object
    required: ["data", "name", "type"]
    properties:
      data:
        description: Base 64 encoded string representation of file's data 
        type: string
      name:
        description: Name of the file
        type: string
      type:
        description: Mime type of file
        type: string
  ReviewUpdateRequest:
    type: object
    required: ["review_ids"]
    properties:
      review_ids:
        description: Array of review ID's to create the review on behalf of
        type: array
        items: {
          type: integer
        }
      date:
        description: | 
          ISO8601 formatted date string that the review should take place
        type: string
      name:
        description: Name of the review
        type: string     
      next_review_name:
        description: Name of the next review
        type: string         
      next_review_date:
        description: ISO8601 formatted date string of the next review date
        type: string
  PositionRequest:
    type: object
    required: ["position","department"]
    properties:
      position:
        type: string
        description: The job title for this position. Required if position instance ID is not provided. If this job title does not exist in the system, a new job description will be created. 
      department:
        type: string
        description: The department that this job is a part of. If this matches an existing department, the department will be used, otherwise a new department will be created.  Required if position instance ID is not provided.
      position_instance_id:
        type: integer
        description: The existing position to fill. Must be provided unless position and department are provided. 
      supervisor_email:
        type: string
        description: |
          E-mail of the manager this person reports to. This manager must already be in the system and be at least a manager or admin role. The position created will automatically be assigned to this supervisor as an employee.
  BatchResult:
    type: object
    properties:
      created:
        type: array
        description: Successfully created entries
        items: {
          type: integer
        }
      failures:
        type: array
        description: Unsuccessfully created entries
        items: {
          type: integer
        }
  Role:
    type: string
    default: employee
    enum:
     - hr
     - manager
     - employee
